# -*- coding: utf-8 -*-
"""Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gdalq7HUF3eF8v0YCbutxsH6-WIVeeyG

Step 1:
"""

!pip install transformers --quiet
!pip install torch --quiet

"""âœ… Step 2: Load the DialoGPT Model



"""

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

# Load pre-trained model and tokenizer
tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")

# Chat history
chat_history_ids = None

"""âœ… Step 3: Create a Chat Function

"""

def chat_with_bot(user_input, chat_history_ids=None):
    # Encode user input and add end of string token
    new_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')

    # Append tokens to chat history (if any)
    bot_input_ids = torch.cat([chat_history_ids, new_input_ids], dim=-1) if chat_history_ids is not None else new_input_ids

    # Generate response
    chat_history_ids = model.generate(bot_input_ids, max_length=1000, pad_token_id=tokenizer.eos_token_id)

    # Decode response
    response = tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)

    return response, chat_history_ids

"""âœ… Step 4: Interact with the Bot


"""

chat_history = None
while True:
    user_input = input("You: ")
    if user_input.lower() in ["exit", "quit"]:
        print("Bot: Bye! ðŸ‘‹")
        break
    response, chat_history = chat_with_bot(user_input, chat_history)
    print(f"Bot: {response}")



""" Step 5: Create the Gradio Chat Interface"""

!pip install gradio --quiet

import gradio as gr
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

# Load DialoGPT
tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")

# Global chat history for continuity
chat_history_ids = None

# Response function
def respond(user_input, history=[]):
    global chat_history_ids
    new_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')
    bot_input_ids = torch.cat([chat_history_ids, new_input_ids], dim=-1) if chat_history_ids is not None else new_input_ids

    chat_history_ids = model.generate(
        bot_input_ids,
        max_length=1000,
        pad_token_id=tokenizer.eos_token_id,
        do_sample=True,
        top_k=50,
        top_p=0.95,
        temperature=0.7,
    )

    response = tokenizer.decode(
        chat_history_ids[:, bot_input_ids.shape[-1]:][0],
        skip_special_tokens=True,
    )

    return response

# Create Gradio Interface
chatbot_ui = gr.ChatInterface(fn=respond, title="ðŸ¤– AI Chatbot", description="Ask anything!")

chatbot_ui.launch()